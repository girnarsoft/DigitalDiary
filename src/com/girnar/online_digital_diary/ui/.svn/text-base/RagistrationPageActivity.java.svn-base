package com.girnar.online_digital_diary.ui;

import java.text.SimpleDateFormat;
import java.util.Calendar;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.database.Cursor;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.girnar.online_digital_diary.database.DbHelper;
import com.girnar.online_digital_diary.interfaces.ImportantMethod;
import com.girnar.online_digital_diary.ui.R;
import com.google.ads.Ad;
import com.google.ads.AdListener;
import com.google.ads.AdRequest;
import com.google.ads.AdSize;
import com.google.ads.AdView;
import com.google.ads.AdRequest.ErrorCode;
import com.google.analytics.tracking.android.EasyTracker;
import com.google.analytics.tracking.android.Tracker;

/**
 * @author
 * 
 */
public class RagistrationPageActivity extends Activity implements
		ImportantMethod, OnClickListener {

	private DbHelper dbHelper1 = new DbHelper(this);
	private TextView textView;
	private DatePicker datePicker;
	private final String TAG = "RagistrationPageActivity";
	private Calendar c = Calendar.getInstance();
	private EditText fname, lname, username, password, dob;
	private RadioGroup gender;
	private ImageView back;
	private Tracker tracker;
	static final int DATE_DIALOG_ID = 0;

	private int mYear, mMonth, mDay;
	private Button submit;

	@SuppressWarnings("deprecation")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		Log.d(TAG, "on create called...");
		setContentView(R.layout.activity_ragistration__page);

		// code for analytics
		EasyTracker.getInstance().setContext(getApplicationContext());
		tracker = EasyTracker.getTracker();
		tracker.trackView("registration page");

		getIds();
		addListener();
		addGoogleAds();

	}

	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		super.onBackPressed();
		finish();
	}

	void addGoogleAds() {
		AdView adView = new AdView(this, AdSize.SMART_BANNER, getResources()
				.getString(R.string.google_ads_id));
		LinearLayout layout = (LinearLayout) findViewById(R.id.googleads);
		layout.addView(adView);
		AdRequest adRequest = new AdRequest();
		final LinearLayout pBar = (LinearLayout) findViewById(R.id.gooleaddload);
		pBar.setVisibility(View.VISIBLE);

		adView.setAdListener(new AdListener() {

			@Override
			public void onReceiveAd(Ad arg0) {
				pBar.setVisibility(View.GONE);
			}

			@Override
			public void onPresentScreen(Ad arg0) {
			}

			@Override
			public void onLeaveApplication(Ad arg0) {
			}

			@Override
			public void onDismissScreen(Ad arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onFailedToReceiveAd(Ad arg0, ErrorCode arg1) {
				// TODO Auto-generated method stub

			}
		});
		adView.loadAd(adRequest);

	}

	protected Dialog onCreateDialog(int id) {
		switch (id) {
		case DATE_DIALOG_ID:
			return new DatePickerDialog(this, mDateSetListener, mYear, mMonth,
					mDay);

		}

		return null;

	}

	private DatePickerDialog.OnDateSetListener mDateSetListener = new DatePickerDialog.OnDateSetListener() {

		public void onDateSet(DatePicker view, int year, int monthOfYear,
				int dayOfMonth) {
			mYear = year;
			mMonth = monthOfYear;
			mDay = dayOfMonth;

			dob.setText(new StringBuilder().append(mDay).append("/")
					.append(mMonth + 1).append("/").append(mYear));

		}

	};

	@Override
	public void addListener() {
		// TODO Auto-generated method stub
		// dob.setOnClickListener(this);
		mYear = c.get(Calendar.YEAR);
		mMonth = c.get(Calendar.MONTH);
		mDay = c.get(Calendar.DAY_OF_MONTH);
		dob.setOnClickListener(this);
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		dob.setText(sdf.format(c.getTime()));
		dob.setOnClickListener(new OnClickListener() {
			@SuppressWarnings("deprecation")
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub

				showDialog(DATE_DIALOG_ID);

			}
		});
		gender.setOnClickListener(this);
		fname.setOnClickListener(this);
		lname.setOnClickListener(this);
		username.setOnClickListener(this);
		password.setOnClickListener(this);
		submit.setOnClickListener(this);
		//back.setOnClickListener(this);
	}

	/**
	 * to insert a value in the database through insert info method
	 */
	public void databaseHelper() {
		// TODO Auto-generated method stub
		String fName = fname.getText().toString();
		String lName = lname.getText().toString();
		String userName = username.getText().toString();

		String password = this.password.getText().toString();
		String birthDate = dob.getText().toString();
		dob.setText(birthDate);
		int id = this.gender.getCheckedRadioButtonId();
		RadioButton gender = (RadioButton) findViewById(id);
		String genderText = gender.getText().toString();
		dbHelper1.open();
		dbHelper1.insertinfo(fName, lName, userName, password, birthDate,
				genderText);

		dbHelper1.close();
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (v == submit) {
			boolean result = validate();

			boolean checkuser = checkRegistration();
			if (result && checkuser == false) {

				databaseHelper();

				finish();
			}
		}
		if (v == back) {

			finish();

		}

	}

	@Override
	public void getIds() {
		// TODO Auto-generated method stub
		fname = (EditText) findViewById(R.id.edittext_fname);
		lname = (EditText) findViewById(R.id.edittext_lname);
		username = (EditText) findViewById(R.id.edittext_username);
		password = (EditText) findViewById(R.id.edittext_password);
		dob = (EditText) findViewById(R.id.edittext_date_of_birth);
		gender = (RadioGroup) findViewById(R.id.radio_group_registration);
		submit = (Button) findViewById(R.id.button_submit_registration);
		back = (ImageView) findViewById(R.id.imageview_back_registration);

	}

	@Override
	public boolean validate() {
		// TODO Auto-generated method stub
		int id = this.gender.getCheckedRadioButtonId();

		if (fname.getText().toString().length() == 0) {
			Toast.makeText(this, "Please fill first name", Toast.LENGTH_SHORT)
					.show();
			return false;
		} else if (lname.getText().toString().length() == 0) {
			Toast.makeText(this, "Please fill Last name", Toast.LENGTH_SHORT)
					.show();
			return false;
		} else if (username.getText().toString().length() == 0) {
			Toast.makeText(this, "Plese fill User Name", Toast.LENGTH_SHORT)
					.show();
			return false;
		} else if (password.getText().toString().length() == 0) {
			Toast.makeText(this, "Please select your password",
					Toast.LENGTH_SHORT).show();
			return false;
		} else if (id == -1) {
			Toast.makeText(this, "Please select your gender",
					Toast.LENGTH_SHORT).show();
			return false;
		} else {
			return true;
		}
	}

	/**
	 * @return textView
	 */
	public TextView getTextView() {
		return textView;
	}

	/**
	 * @param textView
	 */
	public void setTextView(TextView textView) {
		this.textView = textView;
	}

	/**
	 * @return datePicker
	 */
	public DatePicker getDatePicker() {
		return datePicker;
	}

	/**
	 * @param datePicker
	 */
	public void setDatePicker(DatePicker datePicker) {
		this.datePicker = datePicker;
	}

	/**
	 * @return true;
	 */
	public boolean checkRegistration() {
		String uName = username.getText().toString();

		dbHelper1.open();
		Cursor cursor = dbHelper1.checkUserName(uName);

		dbHelper1.close();
		if (cursor == null || cursor.getCount() == 0) {

			return false;
		} else {
			if (cursor.getString(0).equalsIgnoreCase(uName))
				;
			Toast.makeText(this, "username already exist", Toast.LENGTH_LONG)
					.show();

			return true;

		}

	}

}
